Require Import Coq.Lists.List.
Require Import Coq.NArith.NArith.
Require Import Coq.Strings.Ascii.
Require Import ErrorHandlers.All.
Require Import FunctionNinjas.All.
Require Import ListString.All.
Require Import Computation.
Require Import Events.

Import ListNotations.
Local Open Scope char.

Module Run.
  Inductive t : C.t -> Type :=
  | Ret : t C.Ret
  | Par : forall {c1 c2 : C.t}, t c1 -> t c2 -> t (C.Par c1 c2)
  | Send : forall (command : Command.t) (request : Command.request command)
    (answer : Command.answer command) (handler : Command.answer command -> C.t),
    t (handler answer) -> t (C.Send command request handler).
End Run.

(*Module Examples.
  Import C.Notations.

  (** Print one message. *)
  Module One.
    Definition echo : C.t unit :=
      let! message := C.Send Command.Read tt in
      C.Send Command.Write message.

    Definition echo_spec (message : LString.t) : Run.t echo tt.
      unfold echo.
      eapply Run.Bind.
      exact (Run.Send Command.Read _ message).
      exact (Run.Send Command.Write message tt).
    Defined.
  End One.

  (** Print a list of messages. *)
  Module Repeat.
    Fixpoint echo (fuel : nat) : C.t unit :=
      match fuel with
      | O => C.Ret tt
      | S fuel =>
        let! message := C.Send Command.Read tt in
        do! C.Send Command.Write message in
        echo fuel
      end.

    Fixpoint echo_spec (messages : list LString.t)
      : Run.t (echo @@ List.length messages) tt.
      destruct messages as [|message messages]; unfold apply; simpl.
      - exact Run.Ret.
      - eapply Run.Bind.
        exact (Run.Send Command.Read _ message).
        eapply Run.Bind.
        exact (Run.Send Command.Write message tt).
        exact (echo_spec messages).
    Defined.
  End Repeat.

  (** A buffer splitting a message into lists. *)
  Module Buffer.
    Fixpoint buffer (message : LString.t) : C.t unit :=
      match message with
      | [] => C.Ret tt
      | c :: message =>
        do! C.Send Command.Write [c] in
        buffer message
      end.

    Fixpoint buffer_spec (message : LString.t) : Run.t (buffer message) tt.
      destruct message as [|c message].
      - exact Run.Ret.
      - eapply Run.Bind.
        exact (Run.Send Command.Write [c] tt).
        exact (buffer_spec message).
    Defined.
  End Buffer.

  (** Print after serialization. *)
  Module Serializer.
    Definition serialize {A : Type} (print : A -> LString.t) (x : A)
      : C.t unit :=
      C.Send Command.Write (print x).

    Definition serialize_spec {A : Type} (print : A -> LString.t) (x : A)
      : Run.t (serialize print x) tt.
      exact (Run.Send Command.Write (print x) tt).
    Defined.
  End Serializer.

  (** Print using a buffer after serialization. *)
  Module BufferSerializer.
    Definition serialize {A : Type} (print : A -> LString.t) (x : A)
      : C.t unit :=
      Buffer.buffer (print x).

    Definition serialize_spec {A : Type} (print : A -> LString.t) (x : A)
      : Run.t (serialize print x) tt.
      exact (Buffer.buffer_spec (print x)).
    Defined.
  End BufferSerializer.
End Examples.*)
