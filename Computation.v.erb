(** The definition of a computation, used to represent concurrent programs. *)
Require Import Coq.Lists.List.
Require Import Events.

Import ListNotations.

(** Definition of a computation. *)
Module C.
  (** A computation is a free monad with a send primitive. *)
  Inductive t : Type -> Type :=
  | Ret : forall {A : Type}, A -> t A
  | Bind : forall {A B : Type}, t A -> (A -> t B) -> t B
  | Send : forall (command : Command.t), Command.request command ->
    (Command.answer command -> t unit) -> t unit.

  (** Monadic notation. *)
  Module Notations.
    Notation "'let!' X ':=' A 'in' B" := (Bind A (fun X => B))
      (at level 200, X ident, A at level 100, B at level 200).

    Notation "'let!' X ':' T ':=' A 'in' B" := (Bind (A := T) A (fun X => B))
      (at level 200, X ident, A at level 100, T at level 200, B at level 200).

    Notation "'do!' A 'in' B" := (Bind A (fun _ => B))
      (at level 200, B at level 200).
  End Notations.
End C.
